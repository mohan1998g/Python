A Python set is an unordered, mutable collection of unique elements. 
Sets are useful when you need to store a collection of distinct values and perform operations like union, intersection, and difference efficiently. 
Here's a complete guide to Python sets:

1. What is a Set in Python?
A set is an unordered collection of items where each item is unique (no duplicates).
Sets are mutable, meaning you can add or remove elements after the set is created.
Sets themselves are not indexed, so they don’t support accessing elements by position (like lists or tuples).
If we create a set with duplicate elements, when execution, duplicate elements will be removed and unique elements are obtained

Example:

my_set = {1, 2, 3, 4, 5}
print(my_set)  # Output: {1, 2, 3, 4, 5}

2. Creating Sets
Empty Set:
Note: You can’t create an empty set using {}, because that would create an empty dictionary. Instead, use the set() constructor.

empty_set = set()

Set with Elements:
A set can be created using curly braces {} or the set() constructor. Elements must be hashable (immutable types like integers, strings, or tuples).

set1 = {1, 2, 3}
set2 = set([1, 2, 3, 4])  # From a list
set3 = set("hello")  # From a string, duplicates are automatically removed
Example:

my_set = {1, 2, 3, 3, 4}  # Duplicates are removed
print(my_set)  # Output: {1, 2, 3, 4}


3. Set Operations
3.1 Adding Elements
You can add a single element using add() and multiple elements using update().

my_set = {1, 2, 3}


my_set.add(4)
print(my_set)  # Output: {1, 2, 3, 4}

my_set.update([5, 6])
print(my_set)  # Output: {1, 2, 3, 4, 5, 6}


3.2 Removing Elements

Use remove() to delete a specific element (raises KeyError if the element is not found).
Use discard() to remove an element without raising an error if it’s not found.
Use pop() to remove and return an arbitrary element (because sets are unordered).
Use clear() to remove all elements from the set.

my_set = {1, 2, 3}

my_set.remove(2)

my_set.discard(4)  # No error, even though 4 isn't in the set

print(my_set)  # Output: {1, 3}

my_set.clear()  # Clears the set


4. Mathematical Set Operations
Python sets support typical mathematical set operations like union, intersection, and difference. These can be done using methods or operators.

4.1 Union (| or union())

Combines elements from two sets (all unique elements from both sets).
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1 | set2)  # Output: {1, 2, 3, 4, 5}
print(set1.union(set2))  # Output: {1, 2, 3, 4, 5}


4.2 Intersection (& or intersection())

Returns the common elements between two sets.
print(set1 & set2)  # Output: {3}
print(set1.intersection(set2))  # Output: {3}


4.3 Difference (- or difference())

Returns elements that are in the first set but not in the second.
print(set1 - set2)  # Output: {1, 2}
print(set1.difference(set2))  # Output: {1, 2}


4.4 Symmetric Difference (^ or symmetric_difference())
Returns elements that are in either set, but not in both.

print(set1 ^ set2)  # Output: {1, 2, 4, 5}
print(set1.symmetric_difference(set2))  # Output: {1, 2, 4, 5}


5. Set Comparisons

Sets support comparison operations to check for subsets, supersets, and disjoint sets.

5.1 Subset (<= or issubset())

Returns True if all elements of one set are in another.
set1 = {1, 2, 3}
set2 = {1, 2}
print(set2 <= set1)  # Output: True
print(set2.issubset(set1))  # Output: True


5.2 Superset (>= or issuperset())
Returns True if a set contains all elements of another set.
print(set1 >= set2)  # Output: True
print(set1.issuperset(set2))  # Output: True


5.3 Disjoint Sets (isdisjoint())
Returns True if two sets have no elements in common.
set3 = {5, 6}
print(set1.isdisjoint(set3))  # Output: True

6. Set Methods
Method	Description
add()	Adds an element to the set.
remove()	Removes an element from the set (raises error if not found).
discard()	Removes an element from the set (does nothing if not found).
pop()	Removes and returns an arbitrary element from the set.
clear()	Removes all elements from the set.
union()	Returns the union of sets.
intersection()	Returns the intersection of sets.
difference()	Returns the difference between sets.
symmetric_difference()	Returns the symmetric difference of sets.
issubset()	Returns True if the set is a subset of another set.
issuperset()	Returns True if the set is a superset of another set.
isdisjoint()	Returns True if two sets have no elements in common.
update()	Updates the set with the union of itself and others.
intersection_update()	Updates the set with the intersection of itself and others.
difference_update()	Updates the set with the difference of itself and others.
symmetric_difference_update()	Updates the set with the symmetric difference of itself and others.
dir(setname)   lists all the methods that can be used on set

Example:

set1 = {1, 2, 3}
set1.add(4)
set1.update([5, 6])
print(set1)  # Output: {1, 2, 3, 4, 5, 6}

7. Frozen Sets (Immutable Sets)
A frozenset is an immutable version of a set. Once created, you cannot modify the elements of a frozenset (i.e., no adding or removing elements).

Creating a Frozenset:

frozen = frozenset([1, 2, 3])
print(frozen)  # Output: frozenset({1, 2, 3})
Frozensets support all set operations like union, intersection, and difference but cannot be modified after creation.

8. Common Use Cases for Sets
Removing Duplicates: A common use of sets is to eliminate duplicates from a list.
my_list = [1, 2, 2, 3, 4, 4, 5]
unique = list(set(my_list))
print(unique)  # Output: [1, 2, 3, 4, 5]

Membership Testing: Sets are highly optimized for membership tests (checking if an element is in a set).
my_set = {1, 2, 3, 4, 5}
print(3 in my_set)  # Output: True
Mathematical Operations: Sets are commonly used to perform mathematical operations such as union, intersection, and difference.

9. Iterating Over a Set

You can iterate over a set using a for loop. Since sets are unordered, the items will not be in a specific order.
my_set = {1, 2, 3, 4, 5}
for item in my_set:
    print(item)


10. Set Comprehension

Like list comprehension, Python also supports set comprehension.
Example:
squares = {x*x for x in range(1, 6)}
print(squares)  # Output: {1, 4, 9, 16, 25}


Conclusion
Sets in Python are an excellent tool for storing unique elements and performing efficient set operations. 
They are especially useful for tasks involving de-duplication, membership testing, and combining or comparing datasets. 
Understanding how to leverage sets can help improve the efficiency of your programs, especially when working with large datasets.
