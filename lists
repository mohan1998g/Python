Python lists are one of the most versatile and commonly used data structures. Below is a detailed overview of lists in Python, covering their creation, methods, and operations.


1. What is a Python List?
A list is an ordered, mutable collection of items that can hold multiple data types. Lists allow duplicates and can store integers, strings, other lists, or any other data type.


2. Creating Lists
You can create a list by placing comma-separated values inside square brackets [].


# Example of creating a list
my_list = [1, 2, 3, "Hello", True, [5, 6, 7]]
print(my_list)
Empty List
empty_list = []
A list can have different types of elements as well. For example list = ['Max', 1, 1.1, [2,3]]

3. Accessing Elements
You can access elements in a list using indexing and slicing.

Indexing (Zero-based index):

my_list = [10, 20, 30, 40, 50]
print(my_list[0])   # Output: 10
print(my_list[-1])  # Output: 50 (negative indexing starts from the end)


Slicing:

list[start:end]  -->  from index start to (end-1)

list[start:]  ---> from index start to end of the list

list[:end] -->  from index 0 to end-1

list[:]  --> copy of whole array

Examples:
my_list = [10, 20, 30, 40, 50]
print(my_list[1:4])  # Output: [20, 30, 40] (start at index 1, stop before index 4)
print(my_list[:3])   # Output: [10, 20, 30] (start from the beginning)
print(my_list[3:])   # Output: [40, 50] (start from index 3 to the end)


4. List Methods
Here are some common list methods with examples:

append()

Adds an item to the end of the list.
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Output: [1, 2, 3, 4]


insert()
Inserts an item at a specified index.
list.insert(index, object)
my_list.insert(1, "Hello")
print(my_list)  # Output: [1, 'Hello', 2, 3]


extend()
Extends the list by appending elements from another list or iterable.
my_list.extend([5, 6])
print(my_list)  # Output: [1, 2, 3, 4, 5, 6]


remove()
Removes the first occurrence of an item.
my_list.remove(2)
print(my_list)  # Output: [1, 3, 4]


pop()
Removes and returns the item at the given index (or the last item if no index is provided).
my_list.pop()    # Output: 4 (removes the last item)
my_list.pop(1)   # Output: 2 (removes the item at index 1)


clear()
Removes all items from the list.
my_list.clear()
print(my_list)  # Output: []


index()
Returns the index of the first occurrence of a specified value.
my_list = [10, 20, 30, 20]
print(my_list.index(20))  # Output: 1 (first occurrence)


count()
Returns the number of occurrences of a specified value.
my_list = [10, 20, 20, 30]
print(my_list.count(20))  # Output: 2


sort()
Sorts the list in ascending order by default.

my_list = [40, 10, 30, 20]
my_list.sort()
print(my_list)  # Output: [10, 20, 30, 40]


To sort in descending order:
my_list.sort(reverse=True)
print(my_list)  # Output: [40, 30, 20, 10]

reverse()
Reverses the order of the list.

my_list.reverse()
print(my_list)  # Output: [30, 20, 10]


copy()
Creates a shallow copy of the list.

my_list = [1, 2, 3]
new_list = my_list.copy()


5. List Operations


Concatenation:
list1 = [1, 2, 3]
list2 = [4, 5]
combined = list1 + list2
print(combined)  # Output: [1, 2, 3, 4, 5]


Repetition:
list1 = [1, 2, 3]
print(list1 * 2)  # Output: [1, 2, 3, 1, 2, 3]


Membership Test:
list1 = [1, 2, 3]
print(2 in list1)   # Output: True
print(5 not in list1) # Output: True


6. List Comprehension


A concise way to create lists based on existing lists.

squares = [x ** 2 for x in range(5)]
print(squares)  # Output: [0, 1, 4, 9, 16]
With Conditions:
even_squares = [x ** 2 for x in range(10) if x % 2 == 0]
print(even_squares)  # Output: [0, 4, 16, 36, 64]


7. Nested Lists
You can have lists inside lists (multi-dimensional lists).

Example:
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix[0])       # Output: [1, 2, 3]
print(matrix[0][1])    # Output: 2


8. Iterating Over Lists
Using for loop:
my_list = [10, 20, 30]
for item in my_list:
    print(item)
Using while loop:
i = 0
while i < len(my_list):
    print(my_list[i])
    i += 1


9. List Functions


len()
Returns the number of elements in the list.
my_list = [1, 2, 3]
print(len(my_list))  # Output: 3


max() and min()
Returns the maximum or minimum value.
my_list = [10, 20, 30]
print(max(my_list))  # Output: 30
print(min(my_list))  # Output: 10


sum()
Returns the sum of the list elements.
my_list = [1, 2, 3, 4]
print(sum(my_list))  # Output: 10


10. Multidimensional Lists (Matrices)
Lists can also be used to create matrices or 2D lists:

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

You can access the elements using two indices:

print(matrix[0][1])  # Output: 2


11. Mutable Nature of Lists
Lists in Python are mutable, meaning you can change the elements after the list is created.

my_list = [10, 20, 30]
my_list[0] = 100
print(my_list)  # Output: [100, 20, 30]


12. Shallow vs Deep Copy

Shallow copy: Copies the reference to the original data, not the actual data (use .copy()).
Deep copy: Creates a completely independent copy of the object and its contents.
Example of Shallow Copy:
import copy
list1 = [[1, 2], [3, 4]]
list2 = copy.copy(list1)
list2[0][0] = 100
print(list1)  # Output: [[100, 2], [3, 4]]


Example of Deep Copy:
list1 = [[1, 2], [3, 4]]
list2 = copy.deepcopy(list1)
list2[0][0] = 100
print(list1)  # Output: [[1, 2], [3, 4]]


13. Deleting Lists and Elements
Delete an element by index:
my_list = [10, 20, 30]
del my_list[1]
print(my_list)  # Output: [10, 30]
Delete the entire list:
del my_list


Summary:
Lists are ordered, mutable collections that allow duplicates.
Lists support indexing, slicing, and have a variety of built-in methods such as append(), insert(), remove(), and more.
They support list comprehensions, nested lists, and different types of copying (shallow and deep).
